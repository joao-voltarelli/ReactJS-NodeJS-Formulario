{"version":3,"sources":["components/Form/Input.js","components/Form/Textarea.js","components/Form/Checkbox.js","components/Form/Select.js","App.js","reportWebVitals.js","index.js"],"names":["Input","name","rest","inputRef","useRef","useField","fieldName","registerField","defaultValue","error","console","log","current","useEffect","ref","path","style","color","Textarea","label","rows","cols","textareaRef","getValue","value","setValue","clearValue","htmlFor","id","Checkbox","defaultChecked","checked","type","Select","children","selectRef","newValue","check","checkbox","opcoesSelecionadas","Opcao1","Opcao2","Opcao3","App","formRef","data","a","reset","schema","Yup","shape","nome","required","email","descricao","selecionado","validate","abortEarly","dadosCheckbox","dados","require","fetch","method","then","response","status","statusText","text","catch","err","setErrors","errorMessages","inner","forEach","message","selectOptions","className","onSubmit","placeholder","class","options","map","option","href","target","rel","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3788b739.chunk.js","sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport { useField } from '@unform/core';\r\n\r\nexport default function Input({name, ...rest}){\r\n    const inputRef = useRef(null);\r\n    const { fieldName, registerField, defaultValue, error} = useField(name);\r\n\r\n    console.log(inputRef.current);\r\n\r\n    useEffect(() => {\r\n        registerField({\r\n            name: fieldName,\r\n            ref: inputRef.current,\r\n            path: 'value'\r\n        })\r\n    }, [fieldName, registerField]);\r\n\r\n    return(\r\n        <div>\r\n            <input ref={inputRef} defaultValue={defaultValue} {...rest}/>\r\n\r\n            {  error && <span style={{ color: '#f00'}}>{error}</span> }\r\n        </div>\r\n    );\r\n}\r\n  ","import React, { useEffect, useRef } from 'react';\r\nimport { useField } from '@unform/core';\r\n\r\nexport default function Textarea({ name, label, rows = 5, cols, ...rest }) {\r\n    const textareaRef = useRef(null)\r\n    const { fieldName, defaultValue = '', registerField, error } = useField(name)\r\n  \r\n    useEffect(() => {\r\n      registerField({\r\n        name: fieldName,\r\n        ref: textareaRef,\r\n        getValue: ref => {\r\n          return ref.current.value\r\n        },\r\n        setValue: (ref, value) => {\r\n          ref.current.value = value\r\n        },\r\n        clearValue: ref => {\r\n          ref.current.value = ''\r\n        },\r\n      })\r\n    }, [fieldName, registerField])\r\n  \r\n    return (\r\n      <div>\r\n        {label && <label htmlFor={fieldName}>{label}</label>}\r\n  \r\n        <textarea\r\n          ref={textareaRef}\r\n          id={fieldName}\r\n          defaultValue={defaultValue}\r\n          rows={rows}\r\n          cols={cols}\r\n          {...rest}\r\n        />\r\n  \r\n      {  error && <span style={{ color: '#f00'}}>{error}</span> }\r\n      </div>\r\n    )\r\n  }","import React, { useEffect, useRef } from 'react';\r\nimport { useField } from '@unform/core';\r\n\r\nexport default function Checkbox({ name, value, label, ...rest }) {\r\n    const inputRef = useRef()\r\n    const { fieldName, defaultValue, registerField, error } = useField(name)\r\n  \r\n    const defaultChecked = defaultValue === value\r\n  \r\n    useEffect(() => {\r\n      registerField({\r\n        name: fieldName,\r\n        ref: inputRef,\r\n        getValue: ref => {\r\n          return ref.current.checked\r\n        },\r\n        clearValue: ref => {\r\n          ref.current.checked = defaultChecked\r\n        },\r\n        setValue: (ref, value) => {\r\n          ref.current.checked = value\r\n        },\r\n      })\r\n    }, [defaultValue, fieldName, registerField, defaultChecked])\r\n  \r\n    return (\r\n      <div>\r\n        <input\r\n          defaultChecked={defaultChecked}\r\n          ref={inputRef}\r\n          value={value}\r\n          type=\"checkbox\"\r\n          id={fieldName}\r\n          {...rest}\r\n        />\r\n  \r\n        <label htmlFor={fieldName} key={fieldName}>\r\n          {label}\r\n        </label>\r\n  \r\n        {error && <span>{error}</span>}\r\n      </div>\r\n    )\r\n  }","import React, { useEffect, useRef } from 'react';\r\nimport { useField } from '@unform/core';\r\n\r\nexport default function Select({ name, label, children, ...rest }) {\r\n    const selectRef = useRef(null)\r\n  \r\n    const { fieldName, defaultValue, registerField, error } = useField(name)\r\n  \r\n    useEffect(() => {\r\n      registerField({\r\n        ref: selectRef,\r\n        name: fieldName,\r\n        getValue: ref => {\r\n          return ref.current?.value\r\n        },\r\n        setValue: (ref, newValue) => {\r\n          ref.current.value = newValue\r\n        },\r\n        clearValue: ref => {\r\n          ref.current.value = ''\r\n        },\r\n      })\r\n    }, [fieldName, registerField])\r\n  \r\n    return (\r\n      <div>\r\n        <label htmlFor={fieldName}>{label}</label>\r\n  \r\n        <select\r\n          id={fieldName}\r\n          ref={selectRef}\r\n          defaultValue={defaultValue}\r\n          {...rest}\r\n        >\r\n          {children}\r\n        </select>\r\n  \r\n        {  error && <span style={{ color: '#f00'}}>{error}</span> }\r\n      </div>\r\n    )\r\n  }","import React, { useRef } from 'react';\r\nimport { Form } from '@unform/web';\r\nimport * as Yup from 'yup';\r\nimport './App.css';\r\n\r\nimport Input from './components/Form/Input';\r\nimport Textarea from './components/Form/Textarea';\r\nimport Checkbox from './components/Form/Checkbox';\r\nimport Select from './components/Form/Select';\r\n\r\nfunction App() {\r\n  const formRef = useRef(null);\r\n\r\n  async function handleSubmit(data, { reset }) {\r\n    try {\r\n\r\n      const schema = Yup.object().shape({\r\n        nome: Yup.string().required('O nome é obrigatório'),\r\n        email: Yup.string()\r\n          .email('Digite um e-mail válido')\r\n          .required('O e-mail é obrigatório'),\r\n        descricao: Yup.string().required('O campo não pode ser vazio'),\r\n        selecionado: Yup.string().required('Escolha uma opção')\r\n      });\r\n\r\n      await schema.validate(data, {\r\n        abortEarly: false,\r\n      })\r\n\r\n      console.log(data);\r\n\r\n      var dadosCheckbox = check(data);\r\n\r\n      var dados = 'Nome: ' + data.nome + ' | Email: ' + data.email + ' | Descrição: ' + data.descricao + ' | Opções marcadas: ' + dadosCheckbox + ' | Opção selecionada: ' + data.selecionado;\r\n      const fetch = require('node-fetch');\r\n      fetch('https://api.trello.com/1/cards?key=98c4c8dc8e8f352b429f71256894dbe1&token=79a12ae72f0836db43030f692566076a5a75e343457b675b5c4eceb4afc75ccf&idList=605fa145d3ac3c29059b4eb9&name=Usuario&desc=' + dados, {\r\n        method: 'POST',\r\n      })\r\n        .then(response => {\r\n          console.log(\r\n            `Response: ${response.status} ${response.statusText}`\r\n          );\r\n          return response.text();\r\n        })\r\n        .then(text => console.log(text))\r\n        .catch(err => console.error(err));\r\n\r\n      formRef.current.setErrors({});\r\n\r\n      reset();\r\n\r\n    } catch (err) {\r\n      if (err instanceof Yup.ValidationError) {\r\n        const errorMessages = {};\r\n\r\n        err.inner.forEach(error => {\r\n          errorMessages[error.path] = error.message;\r\n        })\r\n\r\n        formRef.current.setErrors(errorMessages);\r\n      }\r\n    }\r\n  }\r\n\r\n  const selectOptions = [\r\n    { value: 'select1', label: 'Select 1' },\r\n    { value: 'select2', label: 'Select 2' },\r\n    { value: 'select3', label: 'Select 3' },\r\n  ]\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Formulário</h1>\r\n\r\n      <Form ref={formRef} onSubmit={handleSubmit}>\r\n        <p>Name</p>\r\n        <Input name=\"nome\" />\r\n        <p>E-mail</p>\r\n        <Input name=\"email\" /><br></br>\r\n        <Textarea name=\"descricao\" placeholder=\"Type something...\" /><br></br>\r\n        <Checkbox class=\"checkbox\"\r\n          name=\"Opcao1\"\r\n          value=\"opcao1\"\r\n          label=\"Opção 1\"\r\n        />\r\n        <Checkbox class=\"checkbox\"\r\n          name=\"Opcao2\"\r\n          value=\"opcao2\"\r\n          label=\"Opção 2\"\r\n        />\r\n        <Checkbox class=\"checkbox\"\r\n          name=\"Opcao3\"\r\n          value=\"opcao3\"\r\n          label=\"Opção 3\"\r\n        />\r\n        <p>Dropdown</p>\r\n        <Select\r\n          name=\"selecionado\"\r\n          options={selectOptions}\r\n        >\r\n          {selectOptions.map(option => (\r\n            <option key={option.value} value={option.value}>\r\n              {option.label}\r\n            </option>\r\n          ))}\r\n        </Select><br></br><br></br>\r\n\r\n        <button type='submit'>ENVIAR</button><br></br><br></br><br></br><br></br>\r\n        <br></br><a href=\"https://trello.com/b/D15ccHjN/formulario\" target=\"_blank\" rel=\"noreferrer\">Link para o board utilizado no Trello</a>\r\n        <br></br><br></br><a href=\"https://github.com/joao-voltarelli/ReactJS-NodeJS-Formulario.git\" target=\"_blank\" rel=\"noreferrer\">Link para o projeto no Github</a>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction check(checkbox) {\r\n  var opcoesSelecionadas = \"\";\r\n  if (checkbox.Opcao1 === true)\r\n    opcoesSelecionadas = \"Opção 1, \";\r\n  if (checkbox.Opcao2 === true)\r\n    opcoesSelecionadas = opcoesSelecionadas + \"Opção 2, \";\r\n  if (checkbox.Opcao3 === true)\r\n    opcoesSelecionadas = opcoesSelecionadas + \"Opção 3 \";\r\n  if (checkbox.Opcao1 === false && checkbox.Opcao2 === false && checkbox.Opcao3 === false)\r\n    opcoesSelecionadas = \"Nenhuma opção foi marcada\";\r\n\r\n  return opcoesSelecionadas;\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}